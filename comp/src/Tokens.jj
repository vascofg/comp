/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(EG1)public class EG1{  public static void main(String args []) throws ParseException  {    EG1 parser = new EG1(System.in);    System.out.println("Write a string...");    try    {      System.out.print("> ");      parser.P();      System.out.println("Accepted");    }    catch (Exception e)    {      System.out.println("Rejected");    }    catch (TokenMgrError e)    {      System.out.println("Rejected");    }  }}PARSER_END(EG1)SKIP :{  " "| " \t "| "\r"}TOKEN :{  < CHAR : [ "A"-"Z", "a"-"z", "0"-"9" ] >//| <SYMBOL : ""> |
|  < WORD : "\\w" >| < NONWORD : "\\W" >| < WHITESPACE : "\\s" >| < NONWHITESPACE : "\\S" >| < DIGIT : "\\d" >| < NONDIGIT : "\\D" >| < ANY : "." >| < ZEROMORE : "*" >| < ONEMORE : "+" >| < ZEROONE : "?" >
| < OPENPARENTHESIS : "(" >
| < CLOSEPARENTHESIS : ")" >  | < MATCH : "{" < INTEGER > "," < INTEGER > "}" >
	| < #INTEGER : ["1"-"9"] (["0"-"9"])* >| < LF : "\n" >}
void Expression() :{}{	< CHAR > (Multiplicity())?
}

void Multiplicity() :
{}{
  (< ZEROMORE >|< ONEMORE >|<ZEROONE >)  }

void ParExpression() :
{}
{
	(< OPENPARENTHESIS >((Expression())+< CLOSEPARENTHESIS >)(Multiplicity())?)
}
void P() :{}{  (    ParExpression()
  )+  < LF >}
