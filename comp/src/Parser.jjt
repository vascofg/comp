/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";

  static = true;
}

PARSER_BEGIN(Regex2Auto)
public class Regex2Auto
{
  public static void main(String args [])
  {
    Regex2Auto parser = new Regex2Auto(System.in);
    System.out.println("Write a string...");
    try
    {
      System.out.print("> ");
      //parser.run();
      SimpleNode n = parser.run();
      n.dump("");
      //System.out.println("Accepted");
   	}
    catch (ParseException e)
    {
      System.out.println(e.getMessage());
    }
    catch (TokenMgrError e)
    {
      System.out.println("Rejected");
    }
  }
}

PARSER_END(Regex2Auto)

SKIP :
{
  " "
| " \t "
| "\r"
}

TOKEN :
{
    < CHAR : [ "A"-"Z", "a"-"z", "0"-"9"] >	
//| <SYMBOL : ""> | 
| < WORD : "\\w" >
| < NONWORD : "\\W" >
| < WHITESPACE : "\\s" >
| < NONWHITESPACE : "\\S" >
| < DIGIT : "\\d" >
| < NONDIGIT : "\\D" >
| < ANY : "." >
| < ZEROMORE : "*" >
| < ONEMORE : "+" >
| < ZEROONE : "?" >
| < OPENPARENTHESIS : "(" >
| < CLOSEPARENTHESIS : ")" >  
| < MATCH : "{" < INTEGER > "," < INTEGER > "}" >
| < MATCHNORMORE : "{" < INTEGER > ",""}" >
| < MATCHN : "{" < INTEGER > "}" >
| < BACKSLASH : "\\" >
| < POSLOOKAHEAD : "?=" >
| < NEGLOOKAHEAD : "?!" >
| < POSLOOKBEHIND : "?<=" >
| < NEGLOOKBEHIND : "?<!" >
| < START : "^" >
| < END : "$" >
  | < #INTEGER : ["1"-"9"] (["0"-"9"])* >
| < LF : "\n" >
}


void EXP() : 
{}
{
	AnyChar() [Multiplicity()][EXP()]
| 	<OPENPARENTHESIS>EXP()<CLOSEPARENTHESIS>[Multiplicity()][EXP()] //N�o aceita ()
//Deve aceitar \ seguido de qualquer s�mbolo que tenha significado para regex (token)	
}

void AnyChar():
{Token t;}
{
  t=< CHAR > #charval {
    jjtThis.val=t.image;
  }| < ANY >  
}

void Multiplicity():
{}
{
  < ZEROMORE > #zeromore
//  {jjtThis.val="*";}
  |< ONEMORE > #onemore
//  {jjtThis.val="+";}
  |<ZEROONE > #zeroone
//  {jjtThis.val="?";}
  
}

/*void ParExpression() :
{}
{
	(< OPENPARENTHESIS >((Expression())+< CLOSEPARENTHESIS >)(Multiplicity())?)
}*/

SimpleNode run() :
{}
{
	EXP()< LF >
  	{
    	return jjtThis;
  	}
}