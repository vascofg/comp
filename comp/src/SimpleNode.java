/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class SimpleNode implements Node {

	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected Regex2Auto parser;

	public SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(Regex2Auto p, int i) {
		this(i);
		parser = p;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	public void jjtSetValue(Object value) {
		this.value = value;
	}

	public Object jjtGetValue() {
		return value;
	}

	/*
	 * You can override these two methods in subclasses of SimpleNode to
	 * customize the way the node appears when the tree is dumped. If your
	 * output uses more than one line you should override toString(String),
	 * otherwise overriding toString() is probably all you need to do.
	 */

	public String toString() {
		String ret = Regex2AutoTreeConstants.jjtNodeName[id];
		if (this.jjtGetValue() != null)
			ret += " " + this.jjtGetValue().toString();
		return ret;
	}

	public String toString(String prefix) {
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */

	public String generateAutomata(String generated, int stateCount) {
		switch (Regex2AutoTreeConstants.jjtNodeName[id]) {
		case "Multiplicity":
			generated += "loop "
					+ ((SimpleNode) parent.jjtGetChild(parent
							.jjtGetNumChildren() - 2)).jjtGetValue().toString()
					+ "\n";
			stateCount++;
		case "Char":
			generated += jjtGetValue().toString() + "\n";
			stateCount++;
		}
		if (children != null) {
			for (int i = 0; i < children.length; i++) {
				SimpleNode n = (SimpleNode) children[i];
				generated += n.generateAutomata("", stateCount);
			}
		}
		return generated;
	}

	public void dump(String prefix) {
		/*
		 * if(this.val!=null) System.out.println(prefix+this.val); else
		 */
		/*
		 * switch(this.id) { case Regex2AutoTreeConstants.JJTZEROMORE:
		 * System.out.println(prefix+jjtGetValue());break; case
		 * Regex2AutoTreeConstants.JJTONEMORE:
		 * System.out.println(prefix+"+");break; case
		 * Regex2AutoTreeConstants.JJTZEROONE:
		 * System.out.println(prefix+"?");break; case
		 * Regex2AutoTreeConstants.JJTCHARVAL:
		 * System.out.println(prefix+val);break; default:
		 * System.out.println(toString(prefix));break; }
		 */
		System.out.println(toString(prefix));

		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}
}

/*
 * JavaCC - OriginalChecksum=c182086b4a6c2ffa42add9568197005b (do not edit this
 * line)
 */
